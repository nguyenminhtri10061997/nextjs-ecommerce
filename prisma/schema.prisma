datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

generator client {
    provider = "prisma-client-js"
}

// for FE if use microservice
// generator typescriptInterfaces {
//   provider = "prisma-generator-typescript-interfaces"
//   output   = "../shared-types/"
// }

// AUTH SERVICE

enum EUserOrAccountType {
    CUSTOMER
    STAFF
}

enum EPermissionAction {
    READ
    CREATE
    UPDATE
    DELETE
}

enum EPermissionResource {
    USER
    ROLE
    PERMISSION
    PRODUCT
    BRAND
    LANGUAGE
    PRODUCT_CATEGORY
    ATTRIBUTE
    OPTION
    PRODUCT_STATUS
    PRODUCT_RATING
    PRODUCT_TAG
}

// Tables

model User {
    id            String             @id @default(uuid())
    fullName      String
    type          EUserOrAccountType
    account       Account?
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @default(now()) @updatedAt
    ProductRating ProductRating[]
}

model Account {
    id                 String             @id @default(uuid())
    username           String             @unique
    password           String
    type               EUserOrAccountType
    accessTokenVersion Int                @default(1)
    isBanned           Boolean            @default(false)
    isBlocked          Boolean            @default(false)
    userId             String             @unique
    roleId             String
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @default(now()) @updatedAt

    role         Role           @relation(fields: [roleId], references: [id])
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    refreshToken RefreshToken[]
}

model Role {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    permissions Permission[]
    accounts    Account[]
}

model Permission {
    id        String              @id @default(uuid())
    resource  EPermissionResource
    action    EPermissionAction
    createdAt DateTime            @default(now())
    updatedAt DateTime            @default(now()) @updatedAt

    roles Role[]

    @@unique([action, resource], name: "action_resource")
}

model RefreshToken {
    id        String   @id @default(uuid())
    token     String
    expiresAt DateTime
    ipAddress String
    userAgent String
    accountId String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    account Account @relation(fields: [accountId], references: [id])
}

// PRODUCT SERVICE

enum EStockStatus {
    STOCKING
    OUT_OF_STOCK
    ALMOST_OUT_OF_STOCK
}

enum EStockType {
    INVENTORY
    // EXTERNAL
    ATTRIBUTE
    DIGITAL
    MANUAL
}

enum EPriceModifierType {
    FREE // free
    ADD // add more money of price
    SUBTRACT // subtract money of price (very rare but example: don't want get plastic eating utensils)
    SET // set price again
    PERCENT // add price by percent %
    REDUCE_PERCENT // reduce price by percent %
}

enum ETagDisplayType {
    TEXT_IMAGE
    IMAGE_ONLY
    TEXT_BACKGROUND
}

enum EOptionContext {
    PRODUCT
    //   ORDER
    //   GIFT
    //   SHIPPING
}

enum EProductType {
    SIMPLE
    VARIABLE
    DIGITAL
    SERVICE
}

enum ESkuStatus {
    ACTIVE
    // INACTIVE_BY_SYSTEM
    INACTIVE_BY_ADMIN
    DELETED
}

enum EAttributeStatus {
    ACTIVE
    // INACTIVE_BY_SYSTEM
    INACTIVE_BY_ADMIN
    DELETED
}

enum EAttributeValueStatus {
    ACTIVE
    // INACTIVE_BY_SYSTEM
    INACTIVE_BY_ADMIN
    DELETED
}

// Tables

model Product {
    id                String       @id @default(uuid())
    productCategoryId String?
    brandId           String?
    code              String       @unique
    name              String       @unique
    slug              String       @unique
    seoTitle          String?
    description       String?
    seoDescription    String?
    detail            String?
    mainImage         String?
    listImages        String[]     @default([])
    viewCount         Int          @default(0)
    soldCount         Int          @default(0)
    type              EProductType
    avgRate           Float?
    isActive          Boolean      @default(true)
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @default(now()) @updatedAt

    attributes       ProductAttribute[]
    skus             ProductSku[]
    translations     ProductTranslation[]
    ratings          ProductRating[]
    productTags      ProductToProductTag[]
    productToOptions ProductToOption[]
    ProductCategory  ProductCategory?      @relation(fields: [productCategoryId], references: [id])
    Brand            Brand?                @relation(fields: [brandId], references: [id])
}

model Brand {
    id        String    @id @default(uuid())
    name      String    @unique
    slug      String    @unique
    logoImage String?
    isActive  Boolean   @default(true)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    products  Product[]
}

model Language {
    id        String   @id @default(uuid())
    code      String   @unique
    name      String   @unique
    isActive  Boolean  @default(true)
    isDefault Boolean? @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    productCategoryTranslations ProductCategoryTranslation[]
    productTranslations         ProductTranslation[]
}

model ProductCategory {
    id                      String            @id @default(uuid())
    name                    String            @unique
    slug                    String            @unique
    seoTitle                String?
    description             String?
    seoDescription          String?
    displayOrder            Int?
    productCategoryParentId String?
    ProductCategoryParent   ProductCategory?  @relation("ProductCategories", fields: [productCategoryParentId], references: [id])
    ProductCategoryChilds   ProductCategory[] @relation("ProductCategories")
    isActive                Boolean           @default(true)
    createdAt               DateTime          @default(now())
    updatedAt               DateTime          @default(now()) @updatedAt

    products     Product[]
    translations ProductCategoryTranslation[]
}

model ProductCategoryTranslation {
    id                String   @id @default(uuid())
    productCategoryId String
    languageId        String
    name              String
    seoTitle          String
    description       String
    seoDescription    String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt

    productCategory ProductCategory @relation(fields: [productCategoryId], references: [id])
    language        Language        @relation(fields: [languageId], references: [id])
}

model ProductTranslation {
    id             String   @id @default(uuid())
    productId      String
    languageId     String
    name           String   @unique
    slug           String   @unique
    seoTitle       String?
    description    String?
    seoDescription String?
    detail         String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now()) @updatedAt

    product  Product  @relation(fields: [productId], references: [id])
    language Language @relation(fields: [languageId], references: [id])
}

model Attribute {
    id           String   @id @default(uuid())
    name         String   @unique
    slug         String   @unique
    displayOrder Int?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt

    attributeValues AttributeValue[]
}

model AttributeValue {
    id           String   @id @default(uuid())
    name         String
    slug         String
    displayOrder Int?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt

    attributeId String
    attribute   Attribute @relation(fields: [attributeId], references: [id])
}

model ProductAttribute {
    id           String           @id @default(uuid())
    productId    String
    name         String           @unique
    slug         String           @unique
    status       EAttributeStatus
    displayOrder Int?
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @default(now()) @updatedAt

    product                  Product                    @relation(fields: [productId], references: [id])
    attributeValues          ProductAttributeValue[]
    productSkuAttributeValue ProductSkuAttributeValue[]

    @@unique([productId, name])
}

model ProductAttributeValue {
    id                 String                @id @default(uuid())
    productAttributeId String
    name               String
    slug               String
    image              String?
    displayOrder       Int?
    status             EAttributeValueStatus
    createdAt          DateTime              @default(now())
    updatedAt          DateTime              @default(now()) @updatedAt

    attribute          ProductAttribute           @relation(fields: [productAttributeId], references: [id])
    skuAttributeValues ProductSkuAttributeValue[]

    @@unique([productAttributeId, name])
}

model ProductSku {
    id           String        @id @default(uuid())
    productId    String
    sellerSku    String?
    stockStatus  EStockStatus?
    stockType    EStockType
    salePrice    Float?
    price        Float
    costPrice    Float?
    stock        Int?
    barcode      String?
    weight       Float?
    width        Float?
    height       Float?
    length       Float?
    note         String?
    displayOrder Int?
    status       ESkuStatus
    downloadUrl  String?
    isDefault    Boolean?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @default(now()) @updatedAt

    product            Product                    @relation(fields: [productId], references: [id])
    skuAttributeValues ProductSkuAttributeValue[]
}

model ProductSkuAttributeValue {
    id                      String   @id @default(uuid())
    productSkuId            String
    productAttributeId      String
    productAttributeValueId String
    image                   String?
    Label                   String?
    createdAt               DateTime @default(now())
    updatedAt               DateTime @default(now()) @updatedAt

    sku            ProductSku            @relation(fields: [productSkuId], references: [id])
    attributeValue ProductAttributeValue @relation(fields: [productAttributeValueId], references: [id])
    attribute      ProductAttribute      @relation(fields: [productAttributeId], references: [id])

    @@unique([productSkuId, productAttributeValueId], name: "productSkuId_productAttributeValueId")
}

model Option {
    id           String         @id @default(uuid())
    name         String         @unique
    slug         String         @unique
    displayOrder Int?
    isActive     Boolean        @default(true)
    context      EOptionContext
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @default(now()) @updatedAt

    optionItems      OptionItem[]
    productToOptions ProductToOption[]
}

model OptionItem {
    id           String   @id @default(uuid())
    optionId     String
    name         String
    slug         String
    displayOrder Int?
    isActive     Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt

    Option                      Option                        @relation(fields: [optionId], references: [id])
    productToOptionToOptionItem ProductToOptionToOptionItem[]
}

model ProductToOption {
    id           String   @id @default(uuid())
    productId    String
    optionId     String
    displayOrder Int?
    isRequired   Boolean  @default(false)
    maxSelect    Int?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt

    product                     Product                       @relation(fields: [productId], references: [id])
    option                      Option                        @relation(fields: [optionId], references: [id])
    productToOptionToOptionItem ProductToOptionToOptionItem[]

    @@unique([productId, optionId])
}

model ProductToOptionToOptionItem {
    id                 String             @id @default(uuid())
    productToOptionId  String
    optionItemId       String
    displayOrder       Int?
    priceModifierType  EPriceModifierType
    priceModifierValue Float
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @default(now()) @updatedAt

    optionItem      OptionItem      @relation(fields: [optionItemId], references: [id])
    productToOption ProductToOption @relation(fields: [productToOptionId], references: [id])

    @@unique([productToOptionId, optionItemId])
}

model ProductTag {
    id               String          @id @default(uuid())
    code             String          @unique
    name             String          @unique
    slug             String          @unique
    description      String?
    expiredAfterDays Int?
    displayType      ETagDisplayType
    image            String?
    bgColor          String?
    textColor        String?
    displayOrder     Int?
    isActive         Boolean         @default(true)
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @default(now()) @updatedAt

    products ProductToProductTag[]
}

model ProductToProductTag {
    id           String    @id @default(uuid())
    productId    String
    productTagId String
    expiredAt    DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @default(now()) @updatedAt

    product    Product    @relation(fields: [productId], references: [id])
    productTag ProductTag @relation(fields: [productTagId], references: [id])

    @@unique([productId, productTagId])
}

model ProductRating {
    id             String   @id @default(uuid())
    userId         String
    productId      String
    rating         Float
    title          String
    detail         String
    video          String?
    images         String[] @default([])
    isVerify       Boolean  @default(false)
    verifyByUserId String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now()) @updatedAt

    product Product @relation(fields: [productId], references: [id])
    user    User    @relation(fields: [userId], references: [id])

    @@unique([productId, userId])
}
